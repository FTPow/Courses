/* Primeramente debemos indicar a que elementos o etiquetas vamos a modificar, por ejemplo, los párrafos <p>, luego abrimos y cerramos llaves {} y dentro de estas colocamos las propiedades que queremos modificar */

.parrafo1 {
    color: firebrick;
    font-family: Poet, sans-serif; /* tipo de letra primaria y secundaria */
    font-size: 20px;
    text-align: center;
    /* font-weight: bolder;  */ /* negrita */
    font-style: italic;
    line-height: 1.5; /* espacio entre líneas */
    letter-spacing: 1px; /* espacio entre letras */
    text-transform: capitalize; /* capitalizar la primera letra de cada palabra */
}

h1 {
    text-align: center;
}

ul, ol {
    list-style-position: inside; /* coloca las viñetas como parte del contenido de la lista */
    text-align: center;
}

/* A continuación vamos a modificar las propiedades de unas clases en específico. Para ello, en vez de colocar primero el nombre de la etiqueta, colocamos un punto (.) y el nombre de la clase */

.tengo {
    color : green;
    text-decoration: line-through; /* tachado */
}

.no-tengo {
    color : red;
}

/* Por último, vamos a modificar las propiedades de un id en específico. Para ello, en vez de colocar primero el nombre de la etiqueta, colocamos una almohadilla (#) y el nombre del id */

#opcional {
    color : purple;
}

.caja1 {
    border: 2px solid black; /* borde, primero va el grosor, luego el estilo y por último el color */
    border-radius: 10px; /* bordes redondeados */
    /* width: 125px; ancho */
    /* height: 50px; alto */
    display: block; /* para que el contenido se acomode en una sola línea */
    padding: 20px 10px; /* espacio entre el borde y el contenido. Este afecta el tamaño total del elemento, al ser un short hand, los valores del padding se asignan en el sentido de las agujas del reloj, es decir arriba, derecha, abajo, izquierda. Si solo se colocara un valor se asignaría a todos los lados, y si se colocan 2 valores, el primero afectaria arriba y abajo y el segundo izquierda y derecha */
    margin: 20px; /* espacio entre el borde y el resto de la página */
}

.caja2 {
    background: lightblue; /* color de fondo */
    /* width: 125px; ancho */
    /* height: 50px; alto */
    display: block; /* para que el contenido se acomode en una sola línea */
    padding: 40px 20px; /* espacio entre el borde y el contenido. Este afecta el tamaño total del elemento, al ser un short hand, los valores del padding se asignan en el sentido de las agujas del reloj, es decir arriba, derecha, abajo, izquierda. Si solo se colocara un valor se asignaría a todos los lados, y si se colocan 2 valores, el primero afectaria arriba y abajo y el segundo izquierda y derecha */
}

.formulario {
    background: lightgray;
    border: 2px solid black; 
    border-radius: 10px; 
    display: block; 
    padding: 20px; 
    margin: 20px; 
}

.linea {
    border: 3px solid black;
    border-radius: 12px;
    margin: 20px;
}

.box {
    width: 125px;
    height: 125px;
    margin: 10px;
    border-radius: 12px;
    border: 5px solid black;
}

.box1 {
    box-sizing: content-box; /* el tamaño del elemento no incluye el padding y el borde. Esta es la propiedad por defecto */
    background: rgba(225, 60, 150, 75%); /* color de fondo con opacidad */
    padding: 25px;
}

.box2 {
    box-sizing: border-box; /* el tamaño del elemento incluye el padding y el borde y estos últimos no afectan el tamaño de la caja */
    background: #f6ae; /* color de fondo en hexadecimal, funciona igual que RGBA, primero se coloca uno o dos valores para el rojo, luego para el verde, luego para el azul yluego para la opacidad */
    padding: 25px;
}

.notificacion {
    background: #ccc;
    border-left: 5px solid #555;
    padding: 15px 20px;
    font-family: sans-serif;
    border-radius: 0px 12px 12px 0px;
}

.titulo-notificacion {
    font-size: 22px;
    font-weight: bolder;
    margin: 0;
}

.hora-notificacion {
    font-size: 15px;
    color: #555;
}

.mensaje-notificacion {
    font-size: 18px;
    margin-bottom: 10px;
    text-align: justify;
}

.remitente-notificacion {
    font-size: 16px;
    margin: 0;
    text-align: right;
    color: #555;
    font-weight: bold;
}

/* En cuanto a las diferentes unidades de medida,tenemos las absolutas, como px, cm, mm, in y las relativas como los % (depende del tamaño del contenedor), em (depende del tamaño de la fuente de la etiqueta padre mas próxima), rem (depende del tamaño de la fuente de la etiqueta html), y finalmente tenemos vh y vw, que serían relativos a la altura y anchura del viewport respectivamente */

/* Propiedades del fondo */

.fondo {
    margin: auto;
    width: 600px;
    height: 400px;
    background-color: transparent; /* color de fondo */
    background-image: url("https://www.w3schools.com/w3images/lights.jpg"); /* imagen de fondo */
    background-repeat: no-repeat; /* no repetir la imagen de fondo */
    background-size: cover; /* cubrir todo el contenedor */
    background-position: center; /* centrar la imagen de fondo */
    background-attachment: fixed; /* fijar la imagen de fondo incluso al hacer scroll */
}

/* Todo esto va en el shorthand background con el siguiente orden: background: image position / size repeat attachmente color, y si no queremos colocar alguna propiedad simplemente continuamos con la siguiente  */

.fondo-gradiente {
    margin: 0;
    background: red;
    width: 100%;
    padding: 15px;
    box-sizing: border-box;
}

.titulo-gradiente {
    margin: 0;
    font-family: sans-serif;
    font-size: 26px;
    color: white;
    text-align: center;
    padding: 20px;
}

.gradiente {
    margin: 20px;
    width: 300px;
    height: 400px;
    border-top: 6px solid #900;
    border-radius: 7px;
    display: inline-block;
}

.gradiente1 {
    background: linear-gradient(transparent, #000a); /* degradado lineal de arriba a abajo, se le pueden agregar porcentajes a cada color para determinar el tamaño */
}

/* .link{
    margin: 0;
    width: 100%;
    height: 325px;
} */

.gradiente2 {
    background: radial-gradient(transparent, #000a); /* degradado radial como viñeta */
}

.gradiente3 {
    background: linear-gradient(to right, #fffa, transparent, #000a); /* degradado lineal de izquierda a derecha */
}

.gradiente4 {
    background: conic-gradient(#fffa, #000a); /* degradado cónico */
}

.titulo-gradiente-sombra {
    margin: 0;
    font-family: sans-serif;
    font-size: 26px;
    text-align: center;
}

.gradiente-sombra {
    margin: auto;
    padding: 20px;
    width: 300px;
    box-sizing: border-box;;
    background: radial-gradient(transparent 5%, #0003);
    border-top: 6px solid #000;
    border-radius: 7px;
    box-shadow: 0 0 40px 0 #0007; /* sombra para cajas, el primer valor es el movimiento a la derecha, el segundo hacia abajo, el tercero el grosor, el cuarto la expansión y el último el color */ 
}

.parrafo-sombra {
    font-family: sans-serif;
    font-size: 20px;
    text-align: justify;
    line-height: 1.5;
    text-shadow: 0 0 10px #000d; /* sombra para texto, el primer valor es el movimiento a la derecha, el segundo hacia abajo, el tercero el grosor y el último el color */
}

.pokemon {
    width: 100%;
    filter: drop-shadow(0 0 10px #06fd); /* sombra para imágenes sin fondo, el primer valor es el movimiento a la derecha, el segundo hacia abajo, el tercero el grosor y el último el color */
}

.zeldaa > img[src$=jpg] { /* todas las imágenes con un src que termina en jpg */
    margin: 20px 0;
    border-radius: 12px;
}

img[alt="Fondo de pantalla de Zelda"] { /* imagen con un alt específico */
    width: 50%;
}

img[alt^="Zelda"] { /* todas las imágenes con un alt que empieza con Zelda */
    width: 24%;
}

ul span { /* todos los span dentro de un ul, no importa si es hijo o nieto */
    color: red;
}

ul > span { /* todos los span que son hijos directos de un ul */
    text-decoration: line-through;
}

.mas-selectores > h2 + p { /* el primer párrafo que sigue inmediatamente a un h2 dentro de la clase mas-selectores */
    color: blue;
}

.mas-selectores > h3 ~ p { /* todos los párrafos que siguen a un h2 dentro de la clase mas-selectores */
    color: green;
}

/* Como podemos ver, todos estos selectores se pueden combinar y concatenar entre sí para crear selectores más específicos. */

/* !important esta propiedad se usa para forzar que una propiedad tenga prioridad sobre otras, pero no es recomendable usarla a menos que sea necesario */

/* Lista de pseudoclases */

.caja-pseudo {
    background: #0af;
    border-radius: 12px;
    width: 200px;
    height: 200px;
    margin: auto;
    box-sizing: border-box;
}

.caja-pseudo:hover {
    border: #000 5px solid; /* borde al pasar el mouse */
    cursor: pointer; /* cambiar el cursor al pasar por encima */
}

.caja-pseudo:active {
    background: #f0f;
    transform: scale(0.9); /* reducir el tamaño al hacer clic */
}

.lista-pseudo > li:first-child { /* primer elemento de la lista */
    color: red;
}

.lista-pseudo > li:last-child { /* último elemento de la lista */
    color: blue;
}

.lista-pseudo > li:nth-child(2) { /* segundo elemento de la lista. Podemos elegir el que se especifique dentro del paréntesis */
    color: green;
}

.lista-pseudo2 > li:nth-child(2n) { /* cada 2 elementos de la lista */
    color: rgb(224, 79, 7);
}

/* La diferencia entre nth-child y nth-of-type en CSS radica en cómo seleccionan los elementos dentro de un contenedor:

1. nth-child Selecciona un elemento basado en su posición relativa a todos los hijos del contenedor, sin importar el tipo de elemento.

2. nth-of-type Selecciona un elemento basado en su posición relativa a otros elementos del mismo tipo dentro del contenedor. */

.lista-pseudo3 > li:not(.excluir) { /* todos los elementos de la lista que no tengan la clase excluir */
    color: green;
}

.vacio:empty { /* todos los elementos de la clase vacio que estén vacíos */
    background: #0005;
    height: 100px;
    width: 100px;
    margin: auto;
}

#pseudo-check {
    width: 100px;
    height: 100px;
}

#pseudo-check:checked { /* cuando el checkbox está marcado */
    width: 50px;
    height: 50px;
}

.divdiv > a:link { /* todos los enlaces dentro de un div que no han sido visitados */
    color: red;
}

.divdiv > a:visited { /* todos los enlaces dentro de un div que han sido visitados */
    color: blue;
}

.divdiv > input:invalid { /* todos los inputs dentro de un div que son inválidos */
    border: 2px solid red;
}

.divdiv > input:valid { /* todos los inputs dentro de un div que son válidos */
    border: 2px solid green;
}

.divdiv > input:focus { /* todos los inputs dentro de un div que están en foco */
    background: #5555;
}

.divdiv > :where(ul, ol) { /* todos los ul y ol dentro de un div */
    background: #0005;
    padding: 10px;
}

.divdiv > :is(ul, ol) { /* todos los ul y ol dentro de un div pero con mas especificidad que la anterior, sobreescribiendola */
    background: #0ff5;
    padding: 10px;
}

.divdiv:has(ul) { /* todos los div que tienen un ul dentro */
    background: #ff05;
    padding: 10px;
}

p:has(+ul) { /* todos los párrafos que tienen una lista desordenada justo después */
    font-family: poet;
    font-size: 20px;
}

/* Pseudoelementos */

.pseudoelementos > h2::first-letter { /* primera letra del h2 */
    font-size: 50px;
    font-weight: bolder;
    color: saddlebrown;
}

.pseudoelementos > p::first-line { /* primera línea del p */
    font-weight: bolder;
    color: darkred;
}

.pseudoelementos > input::placeholder { /* texto de ayuda dentro del input */
    color: darkgreen;
    font-size: 15px;
    font-style: italic;
    font-weight: bolder;
}

.pseudoelementos li::marker { /* marcador de la lista */
    color: blueviolet;
}

.pseudoelementos li::before { /* antes del contenido de la lista */
    content: "before • "; /* contenido que se agrega antes del elemento */
    color: blueviolet;
}

.pseudoelementos li::after { /* después del contenido de la lista */
    content: " • after"; /* contenido que se agrega después del elemento */
    color: blueviolet;
}

.lista {
    border: 2px solid black;
    border-radius: 12px;
    font-size: 25px;
    padding: 0;
}

.lista__item {
    padding: 10px;
    background: #0005;
    border-radius: 12px;
    margin: 10px;
    list-style-type: none; /* quitar las viñetas */
}

.item--bueno {
    background: #0f05;
}

.item--malo {
    background: #f005;
}

.lista--vieja {
    background: #0005;
    opacity: 0.5;
}

.transition-box {
    margin: 40px auto;
    width: 200px;
    height: 200px;
    border-radius: 12px;
}

.box--pink {
    background: #f3a;
    transition: all 0.5s ease 0.5s; /* transición de todas las propiedades en 0.5 segundos. Este shorthand solo funciona para aplicar un solo tipo de transición */
}

.box--pink:hover {
    background: #0af;
    transform: rotate(180deg); /* rotar 180 grados */
    box-shadow: 0 0 20px 0 #0007;
}

.box--blue {
    background: #0af;
    transition-property: all; /* propiedad a la que se le aplicará la transición */
    transition-duration: 0.5s; /* duración de la transición */
    transition-timing-function: ease; /* función de tiempo de la transición. Esto también es personalizable gracias a cubic-bezier */
    transition-delay: 0.5s; /* retraso de la transición */
    /* transition: all 0.5s ease 0.5s; shorthand para aplicar todas las propiedades de transición */
}

.box--blue:hover {
    background: #f3a;
    transform: rotate(-180deg);
    box-shadow: 0 0 20px 0 #0007;
}

.overflow {
    width: 200px;
    height: 200px;
    margin: auto;
    border: 2px solid #000;
    background: #000;
    color: #fff;
    overflow: auto; /* agregar scroll si el contenido es mayor al contenedor. También puede modificarse esta propiedad únicamente en el eje X o Y y puede establecerse como hidden, clip o visible. */
}

.overflow2 {
    margin: 20px auto;
    width: 300px;
    height: 150px;
    border: 2px solid #000;
}

.overflow-title {
    font-size: 25px;
    text-align: center;
    text-wrap: balance; /* balancear el texto en un título generalmente */
}

.notextwrap {
    font-size: 25px;
    text-align: center;
}

.overflow3 {
    margin: 20px auto;
    width: 200px;
    height: 80px;
    border: 2px solid #000;
    overflow-wrap: anywhere; /* permitir el salto de línea en cualquier lugar, solo cuando una palabra es demasiado larga y se desborda */
    text-wrap: pretty; /* es como el text-wrap: balance, pero en párrafos */
}

.hidden {
    text-overflow: ellipsis; /* agregar puntos suspensivos al final del texto si se desborda */
    overflow: hidden; /* ocultar el desbordamiento */
    white-space: nowrap; /* evitar el salto de línea */
}

.object-img {
    display: block;
    margin: 20px auto;
    width: 200px;
    height: 200px;
    border: 2px solid #000;
    object-fit: scale-down; /* ajustar la imagen al contenedor sin distorsionarla */
    object-position: center; /* centrar la imagen dentro del contenedor */
}

.outline-input {
    display: block;
    margin: auto;
    width: 300px;
    height: 50px;
}

.outline-input:focus-visible {
    outline: none; /* quitar el borde al hacer foco. El outline siempre se quita en focus-visible y no en focus */
}

.outline-container {
    margin: 20px auto;
    width: 300px;
    height: 300px;
    background: #0af;
    border: 5px solid #000;
}

.outline-container:hover {
    outline: 5px solid #f00; /* agregar un borde al contenedor cuando un elemento dentro de él tiene foco */
}