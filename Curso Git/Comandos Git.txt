Existen tres áreas: la de trabajo donde modificamos todo el código, la lista de espera o staging y finalmente los repositorios

git config --global user.name <Nombre> -> Establece el nombre de usuario

git config --global user.email "<correo>" -> Establece el correo electrónico del usuario

git config --global core.autocrlf <comando> -> Establecer en "true" si se usa win y en "input" si se usa otro SO

git config --global core.editor "code --wait" -> Establece a VSC como editor de código y establece que debemos guardar y cerrar su ventana para confirmar los cambios cuando haga falta

git config --global color.ui true -> Activa los colores

cd <carpeta> -> Abre una carpeta

cd .. -> Retrocede una carpeta

git init -> Inicia el directorio actual como la rama principal del repositorio

git status -> Muestra el estado actual de los cambios en el directorio

git status -s -> Muestra el estado actual de los cambios en el directorio de forma mas limpia y resumida

rm <archivo> -> Elimina un archivo

mkdir <carpeta> -> Crea una carpeta

rmdir <carpeta> -> Elimina una carpeta

touch <archivo.extension> -> Crea un archivo

cat <archivo> -> Nos muestra el código de un archivo

git add <archivo> -> Añade un archivo a la lista de espera para hacer commit

git add "carpeta/" -> Añade un archivo a la lista de espera para hacer commit (las comillas se colocan cuando un archivo o carpeta tiene espacio)

git commit -m "mensaje" -a -> Confirma los cambios y los guarda en el repositorio con el mensaje escrito

git commit -> Confirma los cambios y los guarda en el repositorio al escribir el mensaje en el editor de código, guardarlo y cerrarlo

git restore <archivo> -> Restaura un archivo eliminado desde el ultimo commit

git restore --staged <archivo> -> Restaura un archivo desde el área de staging y lo quita de esta

git checkout <archivo> -> Checa si un archivo modificado es exactamente igual a su versión de la lista de espera y si no es así lo restaura desde el ultimo commit realizado, también puede utilizarse para restaurar un commit eliminado y posteriormente guardarlo en otra rama distinta a la master

git reset --hard -> Resetea todos los archivo desde el ultimo commit, incluyendo sus modificaciones en la lista de espera

git mv <nombre viejo> <nombre nuevo> -> Cambia el nombre de un archivo o directorio

git show <archivo> -> Muestra la info de un archivo ya commiteado

git log -> Muestra la info y el id de los commits realizados

git log --oneline -> Muestra la info y el id de los commits realizados de manera abreviada

git config --global core.abbrev <numero> -> Configura el numero de caracteres al cual se abreviaran los id de cada commit

git diff <id commit 1> <id commit 2> -> Muestra los cambios realizados entre ambos commits

git diff --name-only <id commit 1> <id commit 2> -> Muestra el nombre de los archivos modificados entre ambos commits

git diff --word-diff <id commit 1> <id commit 2> -> Muestra las diferencias entre las líneas de código de cada commit

git commit --amend -> Permite modificar el mensaje del último commit realizado y si hay modificaciones en la lista de espera, sobreescriben lo que ya estaba en el commit antes de ejecutar este comando. Este comando elimina el último commit relizado y lo reemplaza con el que estemos haciendo

git reset --soft <id commit> -> Mueve el puntero HEAD hasta el commit indicado y elimina los que venian después moviendo todas sus modificaciones al área de staging

git reset --soft head~<numero> -> Indica que el puntero HEAD retroceda tantos números como le indiquemos y los cambios eliminados se suben al área de staging

git reset --mixed <id commit> -> Mueve el puntero HEAD hasta el commit indicado y elimina los que venian después sin agregarlos al área de staging

git reset --hard <id commit> -> Resetea todos los archivo desde el commit seleccionado, incluyendo sus modificaciones en la lista de espera y el área de trabajo. Elimina los commits posteriores al seleccionado

Al hacer resets, luego de especificar que tipo de reset se usará, podemos usar el comando HEAD~<numero> para retoceder el puntero, tantos números como le indiquemos

También es interesante e importante saber que gracias a reset hard podemos incluso recuperar un commit que hayamos eliminado simplemente indicando su hash

git reflog -> Con esto podemos ver detalladamente un historial de todos los commits, creados, modificados y eliminados

git branch -> Muestra todas las ramas creadas

git Branch <Nombre-de-la-rama> -> Crea una nueva rama

git switch <Nombre-de-la-rama> -> Sirve para movernos de una rama a otra

git switch -c <Nombre-de-la-rama> -> Crea una nueva rama e inmediatamente nos mueve a ella

Esto también puede hacerse con git chekout <rama> para movernos entre ramas y git checkout -b <rama> para crear una nueva rama

git branch -d <Nombre-de-la-rama> -> Elimina una rama creada

git branch -m <Nombre-de-la-rama-existente> <Nuevo-nombre-de-la-rama> -> Cambia el nombre de una rama ya creada aunque no estemos en ella

git branch -m <Nuevo-nombre-de-la-rama> -> Cambia el nombre de la rama en la que estemos

git merge <Nombre-de-la-rama-a-fusionar> -> Fusiona la rama en la que estemos con el último commit de la rama indicada. (esto se puede deshacer usando git reset --hard <id commit anterior a la fusión>)

git log --oneline --all -> Muestra todos los commits, incluyendo los de las ramas hijas

git ls-tree -r --name-only <id o hash del commit> -> Nos muestra todos los archivos y directorios del commit indicado, si en vez de colocar el hash de un commit colocamos HEAD, selecciona el commit en donde se encuentre el puntero (el ultimo)

ls -> Nos muestra el contenido de la carpeta en la que nos ubicamos

git config --global core.excludesfile <ruta y nombre del archivo> -> configura un .gitignore_global 

Hay que recordar que lo específico tiene prioridad ante lo global

git config --global alias.<alias> "<comando>" -> Permite guardar un comando largo en uno mas simple a través de un alias

git log-op -> Alias configurado por mí para mostrar un log mejorado

El alias configurado contiene el siguiente comando: "log --oneline --graph --all --pretty=format:'%C(auto)%h%d %s %C(black)%C(bold)%cr'"

git clone <direccion del repositorio> -> Nos permite clonar todo un repositorio en nuestra computadora

code . -> Abre el editor de código VSC

git push origin <nombre de la rama> -> Sube los cambios realizados en el ultimo commit al origen que hayamos clonado en la rama especificada. Realmente no hace falta escribir origin y el nombre de la rama, es solo por si a caso, igualmente para el siguiente comando luego del pull.

git pull -> Nos sincroniza el repositorio local con el último commit hecho en el repositorio remoto. Este comando es una combinación de git fetch y git merge. Ojito de donde está ubicado el puntero HEAD porque si lo detecta en este ultimo commit hecho en el repositorio remoto, dirá que no hay cambios aunque sí los hayamos hecho en nuestra área de trabajo. Además si hay cambios tanto en

Estos últimos dos comandos se configuran agregando -u origin <Nombre-rama>

git fetch -> Nos crea una rama llamada origin/master en nuestro repositorio local, con la finalidad de comparar cambios, para posteriormente hacer un pull y elegir como queremos actualizar el código dependiendo de los cambios realizados tanto en nuestro repositorio local como en el remoto.

Para cambiar a la rama del repositorio remoto luego del git fetch, debemos usar el siguiente comando:

git switch --detach origin/master

git remote add <origin-u-otro-nombre> <direccion del repo remoto> -> Nos agrega una conexión con un repo remoto

este comando seguido de git Branch -M main (cambia el nombre de la rama actual a main, esto porque normalmente main es el nombre por defecto de la rama principal en GitHub), y git push -u origin/main (para hacer un push y el -u para configurar que siempre se haga a origin/main), nos permite migrar un repo local y subirlo a GitHub como uno remoto

git remote -v -> Nos muestra los comandos que podemos ejecutar para el repo remoto conectado

git stash -> Guarda todo el área de trabajo en el área de stash, lo que permite guardar cosas temporalmente sin necesidad de hacer un commit

git stash list -> Nos muestra una lista de los stash realizados y sus id o hash

git stash show <stash> -> Nos muestra los cambios realizados en un stash específico (Si no se especifica nada se aplica al mas reciente)

git stash pop <stash> -> Elimina un stash espécifico y lo aplica al área de trabajo

git stash apply <stash> -> Aplica un stash al área de trabajo sin eliminarlo

git stash drop <stash> -> Elimina un stash

Git stash sirve también para traer toda el área de trabajo de una rama a la otra, esto se puede hacer directamente con el siguiente comando:

git stash branch <Nombre-de-la-rama> <stash-si-queremos-hacerlo-con-uno-especifico>

git stash clear -> Elimina todos los stash creados

git cherry-pick <commit> -> Agarra un commit específico de una rama y trae solamente ese commit a otra rama, a diferencia de merge que trae todos y las fusiona

git rebase <rama> -> Usar cuando se esté trabajando con una rama secundaria y sea necesario actualizar sus cambios con respecto a la rama master, lo que hace este comando es que copia los commits de la rama especificada en la rama en la que estemos y posiciona los commits de esta ultima al final de la primera antes mencionada

git rebase -i <commit> -> Abre el editor de código y nos permite elegir un commit para fusionar con el resto y hacer squash

git tag <nombre-tag> <hash-commit> -> Nos deja colocarle un tag simple a un commit

git tag -a <tag> <commit> -> Nos deja colocar un mensaje mas detallado para el tag a traves del editor de codigo

git show <tag/commit> -> nos muestra toda la info relacionada al tag o commit especificado

git tag -> Nos muestra los tags creados

git tag -d <tag> -> Nos permite borrar un tag

git submodule add <direccion-html> <vendor/nombre-de-la-carpeta> -> Nos permite añadir un submodulo con código de terceros en la carpeta vendor de nuestro repositorio local. Los submodulos nos permiten incluir código de terceros sin necesidad de agregar el contenido del mismo a nuestro repositorio remoto

Al clonar un repositorio con submodulos, solamente se copian sus carpetas vacías sin el contenido, por loque se deben de ejecutar los siguientes comandos para descargar el código correspondiente de los respectivos submodulos:

git submodule init

git submodule update

git submodule -> Nos muestra los submodulos de nuestro repositorio

Con git pull podemos actualizar los submodulos

git bisect start -> Inicia el bisect, lo que nos permite detectar desde que commit existe un fallo específico

git bisect bad <commit> -> Indicamos que este commit tiene un error

git bisect Good <commit> -> Indicamos que este commit funciona correctamente

Hacemos esto hasta que nos indique a partir de que commit existe el fallo y finalmente reiniciamos bisect con el siguiente comando:

git bisect reset

Git Flow se compone de 5 ramas principales: La main donde se suben las versiones finales ya revisadas, la hotfix que sale de main y es para solucionar problemas críticos encontrados, la develop donde estaremos desarrollando el código, las feature en donde se agregan nuevas funcionalidades y parte de la rama develop, y la reléase donde se suben las versiones desarrolladas en la rama develop con la finalidad de revisarlas y posteriormente subirlas a la rama main

git Flow init -> Inicializa gitflow y prepara las ramas

git Flow feature start <nombre-rama> -> Inicia una nueva rama feature

git Flow feature finish <nombre-rama> -> Finaliza una rama feature y la fusiona con develop

git Flow release start <rama> -> Inicia una nueva rama release

git Flow release finish <rama> -> Finaliza una rama release y la fusiona con master

git Flow hotfix start <rama> -> Inicia una nueva rama hotfix

git Flow hotfix finish <rama> -> Finaliza una rama hotfix y la fusiona con master



Por aprender:

git hooks

Página para practicar con graficos: https://git-school.github.io/visualizing-git/#free